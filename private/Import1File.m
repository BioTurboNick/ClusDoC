% Import1File will pull the data from a Zeiss 1.txt file given in string to
% filepath fname.  Output is structure with fields .Header, .Data, and
% .Footer.

function [Output] = Import1File(fname)

filepath = fname;

fid = fopen(filepath);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Format-specific import:
% First entry in data is a '1' in the first column.  This should be the
% first numeral following a whole string of characters and white space.

% Issue with new file formats: a 13th column of data (Z Slice) is included
% in some files.  Check if it is present by counting tabs in the first
% line.
TABCHAR = sprintf('\t');
idx = find(fgetl(fid) == TABCHAR);
fseek(fid, 0, -1);

% Pull headers
format_spec = '%s';
N_cols = numel(idx)+1; % Number of tabs in first line, plus 1

[Head_text, Head_post] = textscan(fid, format_spec, N_cols, 'delimiter', '\t');

Body_format = '%n';
format_spec = repmat(Body_format, 1, numel(idx)+1);
[Body_text, Body_post] = textscan(fid, format_spec, 'delimiter', '\t');

% Odd end-of-file bit in Zeiss files I can't seem to replicate in
% MATLAB-generated files.  Going to just search for the first string in the
% footer and start from there. 

while 1
    ftloc = ftell(fid); % Get byte position of line you're on
    tline = fgetl(fid); % Read string from line
    if ~ischar(tline)
       break
    end
    
    if strfind(tline, 'VoxelSizeX');
        
        floc = strfind(tline, 'VoxelSizeX'); % Pull Start position of first string in footer
        
        break
    else
        floc = [];
    end
    
end

if ~isempty(floc)

    fseek(fid, (ftloc-floc), -1); % Footer starts at start of line where string match was found.

    format_spec = '%s%f%s';
    % On some machines the 'headerLines' value has to be 0 to work.  Not sure
    % why this is the case.
    Footer_text = textscan(fid, format_spec, 'headerLines', 1, 'delimiter', ':');
    
    VoxelSizeX = Footer_text{2}(1);
    VoxelSizeY = Footer_text{2}(2);
    ResolutionX = Footer_text{2}(3);
    ResolutionY = Footer_text{2}(4);
    SizeX = Footer_text{2}(5);
    SizeY = Footer_text{2}(6);
    
else
    Footer_text = '';
end

    % Assign variables pulled out of each step.

    switch length(Body_text)

        case 12

            Data = [Body_text{1} Body_text{2} Body_text{3} Body_text{4} Body_text{5} Body_text{6}...
                Body_text{7} Body_text{8} Body_text{9} Body_text{10} Body_text{11} Body_text{12}];

        case 13

            Data = [Body_text{1} Body_text{2} Body_text{3} Body_text{4} Body_text{5} Body_text{6}...
                Body_text{7} Body_text{8} Body_text{9} Body_text{10} Body_text{11} Body_text{12} Body_text{13}];

        case 14
            
            Data = [Body_text{1} Body_text{2} Body_text{3} Body_text{4} Body_text{5} Body_text{6}...
                Body_text{7} Body_text{8} Body_text{9} Body_text{10} Body_text{11} Body_text{12} Body_text{13} Body_text{14}]; 
            
        case 15 % Files generated by Generate3DTestData give 15 columns for some reason

            Data = [Body_text{1} Body_text{2} Body_text{3} Body_text{4} Body_text{5} Body_text{6}...
                Body_text{7} Body_text{8} Body_text{9} Body_text{10} Body_text{11} Body_text{12} Body_text{13} Body_text{14}]; 
    end


    


Output.Header = Head_text{1};
Output.Data = Data;
Output.Footer = Footer_text;